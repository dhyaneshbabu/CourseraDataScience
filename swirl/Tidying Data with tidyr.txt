| Package ‘readr’ loaded correctly!

| Package ‘tidyr’ loaded correctly!

| Package ‘dplyr’ loaded correctly!

students
  grade male female
1     A    1      5
2     B    5      0
3     C    5      2
4     D    5      5
5     E    7      4

| You are really on a roll!

  |=====================                                                                                                                              |  15%
| The first column represents each of five possible grades that students could receive for a particular class. The second and third columns give the number
| of male and female students, respectively, that received each grade.

...

  |========================                                                                                                                           |  16%
| This dataset actually has three variables: grade, sex, and count. The first variable, grade, is already a column, so that should remain as it is. The
| second variable, sex, is captured by the second and third column headings. The third variable, count, is the number of students for each combination of
| grade and sex.

...

  |===========================                                                                                                                        |  18%
| To tidy the students data, we need to have one column for each of these three variables. We'll use the gather() function from tidyr to accomplish this.
| Pull up the documentation for this function with ?gather.

> ?gather

| Your dedication is inspiring!



> gather(students,sex,count,-grade)
   grade    sex count
1      A   male     1
2      B   male     5
3      C   male     5
4      D   male     5
5      E   male     7
6      A female     5
7      B female     0
8      C female     2
9      D female     5
10     E female     4
========================================================================
students3 %>%
  gather(class, grade, class1:class5, na.rm = TRUE) %>%
  print
==========================
students2 %>%
  gather(  sex_class,count , -grade) %>%
  separate( sex_class, c("sex", "class")) %>%
  print
=========================
students3 %>%
  gather(class, grade, class1:class5, na.rm = TRUE) %>%
  spread(test , grade) %>%
  print
=================
students3 %>%
  gather(class, grade, class1:class5, na.rm = TRUE) %>%
  spread(test, grade) %>%
  ### Call to mutate() goes here %>%
  mutate(class = parse_number(class)) 
  print
================================
# Complete the chained command below so that we are
# selecting the id, name, and sex column from students4
# and storing the result in student_info.
#
student_info <- students4 %>%
  select(id, name, sex) %>%
  print
================================
# Add a call to unique() below, which will remove
# duplicate rows from student_info.
#
# Like with the call to the print() function below,
# you can omit the parentheses after the function name.
# This is a nice feature of %>% that applies when
# there are no additional arguments to specify.
#
student_info <- students4 %>%
  select(id, name, sex) %>%
  unique %>%
  print

  ===============================
  # the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
  select(-contains("total")) %>%
  gather(part_sex, count, -score_range) %>%
  separate(part_sex, c("part", "sex")) %>%
  print
=================
