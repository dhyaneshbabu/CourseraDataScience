

| Principles_of_Analytic_Graphs. (Slides for this and other Data Science courses may be found at
| github https://github.com/DataScienceSpecialization/courses/. If you care to use them, they must be
| downloaded as a zip file and viewed locally. This lesson corresponds to
| 04_ExploratoryAnalysis/Principles_of_Analytic_Graphics.)

| You're ready to start. Graphs give us a visual form of data, and the first principle of analytic
| graphs is to show some comparison. You'll hear more about this when you study statistical inference
| (another great course BTW), but evidence for a hypothesis is always relative to another competing or
| alternative hypothesis.
===================================

| So the first principle was to show a comparison. The second principle is to show causality or a
| mechanism of how your theory of the data works. This explanation or systematic structure shows your
| causal framework for thinking about the question you're trying to answer.

================
| To show you what we mean, here's an example of a figure taken from a paper published in the
| Journal of the AMA. It shows the relationship between pollution and hospitalization of people
| with heart disease. As you can see, it's a lot different from our previous plots. The solid
| circles in the center portion indicate point estimates of percentage changes in hospitalization
| rates for different levels of pollution. The lines through the circles indicate confidence
| intervals associated with these estimates. (You'll learn more about confidence intervals in
| another great course, the one on statistical inference.)

====================
| Instead, exploratory graphs are the initial step in an investigation, the "quick and dirty" tool
| used to point the data scientist in a fruitful direction. A scientist might need to make a lot
| of exploratory graphs in order to develop a personal understanding of the problem being studied.
| Plot details such as axes, legends, color and size are cleaned up later to convey more
| information in an aesthetically pleasing way.

============
| The "whiskers" of the box (the vertical lines extending above and below the box) relate to the
| range parameter of boxplot, which we let default to the value 1.5 used by R. The height of the
| box is the interquartile range, the difference between the 75th and 25th quantiles. In this case
| that difference is 2.8. The whiskers are drawn to be a length of range*2.8 or 1.5*2.8. This
| shows us roughly how many, if any, data points are outliers, that is, beyond this range of
| values.

========

 To see this, run the R command abline with the argument h equal to 12. Recall that 12 is the EPA
| standard for air quality.

> abline(h=12)

| You are amazing!
=================
> rug(ppm)

| Keep up the great work!

  |=================================                                                        |  37%

| This one-dimensional plot, with its grayscale representation, gives you a little more detailed
| information about how many data points are in each bucket and where they lie within the bucket.
| It shows (through density of tick marks) that the greatest concentration of counties has between
| 9 and 12 micrograms per cubic meter just as the histogram did.
============
> boxplot(pm25 ~ region, data = pollution, col = "red")

| That's the answer I was looking for.

  |==========================================================                               |  65%

| Two for the price of one! Similarly we can plot multiple histograms in one plot, though to do
| this we have to use more than one R command. First we have to set up the plot window with the R
| command par which specifies how we want to lay out the plots, say one above the other. We also
| use par to specify margins, a 4-long vector which indicates the number of lines for the bottom,
| left, top and right. Type the R command par(mfrow=c(2,1),mar=c(4,4,2,1)) now. Don't expect to
| see any new result.

=================
| Would you believe that it is something where you can make a plot appear, either a screen device,
| such as a window on your computer, OR a file device?

===========
 We'll mention 4 specific vector formats. The first is pdf, which we've just used in our example.
| This is useful for line-type graphics and papers. It resizes well, is usually portable, but it is
| not efficient if a plot has many objects/points.

...

  |===============================================                                          |  53%

| The second is svg which is XML-based, scalable vector graphics. This supports animation and
| interactivity and is potentially useful for web-based plots.

...

  |==================================================                                       |  56%

| The last two vector formats are win.metafile, a Windows-only metafile format, and postscript
| (ps), an older format which also resizes well, is usually portable, and can be used to create
| encapsulated postscript files. Unfortunately, Windows systems often donâ€™t have a postscript
| viewer.

...

  |====================================================                                     |  59%

| We'll also mention 4 different bitmap formats. The first is png (Portable Network Graphics) which
| is good for line drawings or images with solid colors. It uses lossless compression (like the old
| GIF format), and most web browsers can read this format natively. In addition, png is good for
| plots with many points, but it does not resize well.

============================
|=====                                                                                     |   5%

| The first plotting system is the Base Plotting System which comes with R. It's the oldest system
| which uses a simple "Artist's palette" model. What this means is that you start with a blank
| canvas and build your plot up from there, step by step.

...

  |=======                                                                                   |   8%

| Usually you start with a plot function (or something similar), then you use annotation functions
| to add to or modify your plot. R provides many annotating functions such as text, lines, points,
| and axis. R provides documentation for each of these. They all add to an already existing plot.

===================================

| Now we'll move on to the second plotting system, the Lattice System which comes in the package of
| the same name. Unlike the Base System, lattice plots are created with a single function call such
| as xyplot or bwplot. Margins and spacing are set automatically because the entire plot is
| specified at once.

==================================
| The core plotting and graphics engine in R is encapsulated in two packages. The first is the
| graphics package which contains plotting functions for the "base" system. The functions in this
| package include plot, hist, boxplot, barplot, etc. The second package is grDevices which
| contains all the code implementing the various graphics devices, including X11, PDF, PostScript,
| PNG, etc.
============
